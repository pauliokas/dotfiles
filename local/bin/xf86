#!/usr/bin/env sh

help() {
    echo -e "usage: $0 [command]"
    echo -e ""
    echo -e "Commands:"
    echo -e "\tvolume"
    echo -e "\thelp"
}

die() {
    echo >&2 "$@"
    exit 1
}

volume() (
    local channel=$1
    local action=$2

    local default_sink=$(pacmd dump | grep "set-default-$channel" | cut -d' ' -f2)

    local sink_info=$(pacmd "list-${channel}s" | grep -A20 "name: <$default_sink>")

    local max_volume=$(echo "$sink_info" | grep 'base volume:' | sed -E 's/.* ([0-9]+) .*/\1/')
    local cur_volume=$(echo "$sink_info" | grep '	volume:' | sed -E 's/.*: ([0-9]+) .*/\1/')

    local sink_muted=false
    if [[ $(echo "$sink_info" | grep 'muted:' | sed -E 's/.*muted: (.*)/\1/') = 'yes' ]]; then
        sink_muted=true
    fi

    volume_mute() {
        local mute=true
        if [[ "$sink_muted" = 'true' ]]; then
            mute=false
        fi

        pacmd "set-$channel-mute" $default_sink $mute

        sink_muted=$mute
    }

    volume_next_step() {
        local cmp=$1
        shift
        local steps="$@"

        for next_step in $steps
        do
            eval "test $next_step $cmp $cur_volume" && break
        done

        pacmd "set-$channel-volume" $default_sink $next_step

        cur_volume=$next_step
    }

    current_status() {
        echo "volume: $(( 100 * $cur_volume / $max_volume ))"
        echo "muted: $sink_muted"
    }

    case $action in
        mute)
            volume_mute $default_sink $sink_muted
            ;;
        up)
            volume_next_step -gt $(seq 0 $(( $max_volume / 16 )) $max_volume)
            ;;
        down)
            volume_next_step -lt $(seq 0 $(( $max_volume / 16 )) $max_volume | tac)
            ;;
        '')
            # drop down
            ;;
        *)
            die "Unknown command: volume $action"
    esac

    current_status
)

brightness() (
    local action=$1
    local brightness_mod='/sys/class/backlight/amdgpu_bl0'

    local max_brightness=$(cat "$brightness_mod/max_brightness")
    local cur_brightness=$(cat "$brightness_mod/brightness")

    brigness_next_step() {
        local cmp=$1
        shift
        local steps="$@"

        for next_step in $steps
        do
            eval "test $next_step $cmp $cur_brightness" && break
        done

        if [[ $next_step -gt $max_brightness ]]; then
            next_step=$max_brightness
        fi

        echo $next_step > "$brightness_mod/brightness"

        cur_brightness=$next_step
    }
    
    case $action in
        up)
            brigness_next_step -gt $(seq 0 $(( ($max_brightness + 1) / 16 )) $(( $max_brightness + 1 )) )
            ;;
        down)
            brigness_next_step -lt $(seq 0 $(( ($max_brightness + 1) / 16 )) $(( $max_brightness + 1 )) | tac)
            ;;
        '')
            # drop down
            ;;
        *)
            die "Unknown command: volume $action"
    esac

    echo "brightness: $(( 100 * $cur_brightness / $max_brightness ))"
)

command=$1
shift

case $command in
    volume)
        volume 'sink' "$@"
        exit
        ;;
    input-volume)
        volume 'source' "$@"
        exit
        ;;
    brightness)
        brightness "$@"
        exit
        ;;
    help)
        help
        ;;
    *)
        die "Unknown command: $command"
        ;;
esac
